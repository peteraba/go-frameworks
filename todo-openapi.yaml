openapi: 3.0.3

tags:
  - name: "project"
    description: "Operations related to TODO projects"
  - name: "list"
    description: "Operations related to TODO lists"
  - name: "todo"
    description: "Operations related to TODO items"
  - name: "user"
    description: "Operations related to users"

info:
  title: TODO Application API
  version: 1.0.0
  description: API for managing TODO projects, lists, and items.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: API Support
    url: https://www.example.com/support
    email: support@example.com

servers:
  - url: http://localhost:8080/api

paths:
  /projects:
    get:
      summary: List all TODO projects
      operationId: listProjects
      tags:
        - project
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.read"]
      responses:
        '200':
          description: A list of TODO projects
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Project'
              example:
                - id: "01K02QGZD4JQPT6NYQNG73TV52"
                  listId: "01K02QHC275FZX8AQ33EZX835K"
                  name: "Shopping Lists"
                  description: "All the lists the have to do with shopping"
                  completed: true
        '4XX':
          description: Problem with the request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
    post:
      summary: Create a new TODO project
      operationId: createProject
      tags:
        - project
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      requestBody:
        required: true
        description: The project to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '4XX':
          description: Problem with the project creation request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'

  /projects/{projectId}:
    get:
      summary: Get a TODO project by ID
      operationId: getProject
      tags:
        - project
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.read"]
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project details
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '4XX':
          description: Problem with the project retrieval request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
    put:
      summary: Update a TODO project
      operationId: updateProject
      tags:
        - project
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        description: The project to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '4XX':
          description: Problem with the project creation request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'

  /lists:
    get:
      summary: List all TODO lists in a project
      operationId: listLists
      tags:
        - list
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.read"]
      responses:
        '200':
          description: A list of TODO lists
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/List'
              example:
                - id: 01K02V6V1EX0A8W3X30WP2A0E6
                  projectId: 01K02V79XJM8DS0W39VFEBB20Z
                  name: "Random TODO List Title"
                  description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        '4XX':
          description: Problem with the todo list listing request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
    post:
      summary: Create a new TODO list in a project
      operationId: createList
      tags:
        - list
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      requestBody:
        required: true
        description: Request body for TODO list creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreate'
      responses:
        '201':
          description: List created
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '4XX':
          description: Problem with the todo list creation request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'

  /lists/{listId}:
    get:
      summary: Get a TODO list by ID
      operationId: getList
      tags:
        - list
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.read"]
      parameters:
        - $ref: '#/components/parameters/ListId'
      responses:
        '200':
          description: List details
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '4XX':
          description: Problem with the todo list retrieval request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
    put:
      summary: Update a TODO list in a project
      operationId: updateList
      tags:
        - list
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      parameters:
        - $ref: '#/components/parameters/ListId'
      requestBody:
        required: true
        description: Request body for TODO list creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUpdate'
      responses:
        '201':
          description: List created
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '4XX':
          description: Problem with the todo list creation request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'

  /lists/{listId}/todos:
    get:
      summary: List all TODO items in a list
      operationId: listTodos
      tags:
        - todo
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      parameters:
        - $ref: '#/components/parameters/ListId'
      responses:
        '200':
          description: A list of TODO items
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                type: array
                maxItems: 1000
                items:
                  $ref: '#/components/schemas/Todo'
              example:
                - id: 01K02VCHB4RC2NKDZSSK4N2V29
                  listId: 01K02VGFMND0PBFMMDRCZ7BSA7
                  title: Milk
                  description: Bio from local vendor, below 5
                  completed: false
        '4XX':
          description: Problem with the todo item listing request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
    post:
      summary: Create a new TODO item in a list
      operationId: createTodo
      tags:
        - todo
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      parameters:
        - $ref: '#/components/parameters/ListId'
      requestBody:
        required: true
        description: The details of the TODO item to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
      responses:
        '201':
          description: TODO item created
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '4XX':
          description: Problem with the todo list item creation request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'

  /lists/{listId}/todos/{todoId}:
    get:
      summary: Get a TODO item by ID
      operationId: getTodo
      tags:
        - todo
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.read"]
      parameters:
        - $ref: '#/components/parameters/ListId'
        - $ref: '#/components/parameters/TodoId'
      responses:
        '200':
          description: TODO item details
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '4XX':
          description: Problem with the todo list item retrieval request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
    put:
      summary: Update a TODO item in a list
      operationId: updateTodo
      tags:
        - todo
      security:
        - ApiKeyAuth: []
        - OAuth2: ["project.write"]
      parameters:
        - $ref: '#/components/parameters/ListId'
        - $ref: '#/components/parameters/TodoId'
      requestBody:
        required: true
        description: The details of the TODO item to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdate'
      responses:
        '200':
          description: TODO item updated
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '4XX':
          description: Problem with the todo list item update request
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimitLimit'

  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - user
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 01K02QJNKNBXE821CH1ZFTATAV
                  name: John Doe
                  email: john@example.com
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - user
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        description: Object used to update a create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUser
      tags:
        - user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          description: The unique identifier of the user to retrieve
          in: path
          required: true
          schema:
            type: string
            format: ulid
            maxLength: 26
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          description: The unique identifier of the user to update
          in: path
          required: true
          schema:
            type: string
            format: ulid
            maxLength: 26
      requestBody:
        required: true
        description: Object used to update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          description: The unique identifier of the user to delete
          in: path
          required: true
          schema:
            type: string
            format: ulid
            maxLength: 26
      responses:
        '204':
          description: User deleted

  /users/{userId}/passwords:
    put:
      summary: Update a user password
      operationId: updateUserPassword
      tags:
        - user
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          description: The unique identifier of the user to update
          in: path
          required: true
          schema:
            type: string
            format: ulid
            maxLength: 26
      requestBody:
        required: true
        description: Object used to update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /logins:
    post:
      summary: Login a user
      operationId: loginUser
      tags:
        - user
      requestBody:
        required: true
        description: Login credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request format"

components:
  headers:
    RateLimitLimit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000

  parameters:
    ProjectId:
      name: projectId
      in: path
      required: true
      description: The id of the project
      schema:
        type: string
        format: ulid
        maxLength: 26
        example: 01K02SD13A5YKWWZFV9AQP7H1X

    ListId:
      name: listId
      in: path
      required: true
      description: The id of the list
      schema:
        type: string
        format: ulid
        maxLength: 26
        example: 01K02SDGMJM0Q915WHQYJ0YVDY

    TodoId:
      name: todoId
      in: path
      required: true
      description: The id of the TODO item
      schema:
        type: string
        format: ulid
        maxLength: 26
        example: 01K02SF1XKPRMXDCACJ05WNT8T

  schemas:
    Project:
      type: object
      description: Object representing a TODO project
      properties:
        id:
          type: string
          example: "01K02QJNKNBXE821CH1ZFTATAV"
          maxLength: 26
          format: ulid
        name:
          type: string
          example: "Shopping lists"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "All the lists that need to do with shopping."
          maxLength: 64
          pattern: .*
      required:
        - id
        - name
    ProjectCreate:
      type: object
      description: Object used to create a new TODO project
      properties:
        name:
          type: string
          example: "Shopping lists"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "All the lists that need to do with shopping."
          maxLength: 255
          pattern: .*
      required:
        - name
    ProjectUpdate:
      type: object
      description: Object used to update a TODO project
      properties:
        name:
          type: string
          example: "Shopping lists"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "All the lists that need to do with shopping."
          maxLength: 255
          pattern: .*
      required:
        - name
    List:
      type: object
      description: Object representing a TODO list
      properties:
        id:
          type: string
          example: "01K02QGENAEEM22FBW1P86S5YN"
          maxLength: 26
          format: ulid
        projectId:
          type: string
          example: "01K02QBK5K1PBQ7TP755AFWJWQ"
          maxLength: 26
          format: ulid
        name:
          type: string
          example: "Shopping list"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "Shopping list for Mom"
          maxLength: 255
          pattern: .*
      required:
        - id
        - projectId
        - name
    ListCreate:
      type: object
      description: Object used to create a new TODO list
      properties:
        projectId:
          type: string
          example: "01K02QBK5K1PBQ7TP755AFWJWQ"
          maxLength: 26
          format: ulid
        name:
          type: string
          example: "Shopping list"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "Shopping list for Mom"
          maxLength: 255
          pattern: .*
      required:
        - name
    ListUpdate:
      type: object
      description: Object used to update a TODO list
      properties:
        projectId:
          type: string
          example: "01K02QBK5K1PBQ7TP755AFWJWQ"
          maxLength: 26
          format: ulid
        name:
          type: string
          example: "Shopping list"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "Shopping list for Mom"
          maxLength: 255
          pattern: .*
      required:
        - name
    Todo:
      type: object
      description: Object representing a TODO item
      properties:
        id:
          type: string
          example: "01K02QGZD4JQPT6NYQNG73TV52"
          maxLength: 26
          format: ulid
        listId:
          type: string
          example: "01K02QHC275FZX8AQ33EZX835K"
          maxLength: 26
          format: ulid
        title:
          type: string
          example: "Milk"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "Bio, discounted"
          maxLength: 255
          pattern: .*
        completed:
          type: boolean
          example: true
      required:
        - id
        - listId
        - title
        - completed
    TodoCreate:
      type: object
      description: Object used to create a new todo item
      properties:
        listId:
          type: string
          example: "01K02QHC275FZX8AQ33EZX835K"
          maxLength: 26
          format: ulid
        title:
          type: string
          example: "Milk"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "Milk, Bread, Cheese"
          maxLength: 255
          pattern: .*
        completed:
          type: boolean
          example: true
      required:
        - listId
        - title
        - completed
    TodoUpdate:
      type: object
      description: Object used to update a todo item
      properties:
        title:
          type: string
          example: "Milk"
          maxLength: 64
          pattern: .*
        description:
          type: string
          example: "Milk, Bread, Cheese"
          maxLength: 255
          pattern: .*
        completed:
          type: boolean
          example: true
      required:
        - title
        - completed
    User:
      type: object
      description: Object representing a user
      properties:
        id:
          type: string
          example: "01K02QJNKNBXE821CH1ZFTATAV"
          maxLength: 26
          format: ulid
        name:
          type: string
          example: "John Doe"
          maxLength: 64
        email:
          type: string
          example: "john@example.com"
          format: email
        groups:
          type: array
          description: List of authorization group IDs the user belongs to
          example:
          - group1
          items:
            type: string
            maxLength: 26
            format: ulid
      required:
        - id
        - name
        - email
    UserCreate:
      type: object
      description: Object used to create a new user
      properties:
        name:
          type: string
          example: "John Doe"
          maxLength: 64
        email:
          type: string
          example: "john@example.com"
          format: email
        groups:
          type: array
          description: List of authorization group IDs the user belongs to
          example:
          - group1
          items:
            type: string
            maxLength: 26
            format: ulid
        password:
          type: string
          example: "etDL9kOawp0#2S"
          format: password
        password2:
          type: string
          example: "jFwHrm^cra7$dd"
          format: password
      required:
        - name
        - email
    UserUpdate:
      type: object
      description: Object used to update a user
      properties:
        name:
          type: string
          example: "John Doe"
          maxLength: 64
        email:
          type: string
          example: "john@example.com"
          format: email
        groups:
          type: array
          description: List of authorization group IDs the user belongs to
          example:
          - group1
          items:
            type: string
            maxLength: 26
            format: ulid
    UserLogin:
      type: object
      description: Object used to log in a user
      properties:
        email:
          type: string
          example: "john@example.com"
          format: email
          description: User's email address
        password:
          type: string
          example: "WohO&b3#Tz9NcX"
          format: password
          description: User's password
      required:
        - email
        - password
    LoginResponse:
      type: object
      description: Response object for successful login
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          description: JWT token for authentication
          format: jwt
      required:
        - token
    UserPasswordUpdate:
      type: object
      description: Object used to update a user
      properties:
        password:
          type: string
          example: "24UbUmRd8#buZ9"
          format: password
        password2:
          type: string
          example: "4$kiLIG#56QvJC"
          format: password

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: This is the main API security scheme
    OAuth2:
      type: oauth2
      description: OAuth2 authentication with authorization code flow
      flows:
        authorizationCode:
          authorizationUrl: https://my.auth.example.com/
          tokenUrl: https://my.token.example.com/
          refreshUrl: https://my.refresh.example.com/
          scopes:
            read: read objects in your account
            write: write objects in your account
      

